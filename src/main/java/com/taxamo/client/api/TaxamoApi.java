package com.taxamo.client.api;

/*
*  Copyright 2014 Taxamo, Ltd.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/

/*
* NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
*/


import com.taxamo.client.common.ApiException;
import com.taxamo.client.common.ApiInvoker;

import com.taxamo.client.model.CalculateTaxIn;
import com.taxamo.client.model.CreateSMSTokenIn;
import com.taxamo.client.model.CreatePaymentIn;
import com.taxamo.client.model.LocateMyIPOut;
import com.taxamo.client.model.UpdateTransactionOut;
import com.taxamo.client.model.CalculateTaxOut;
import com.taxamo.client.model.CancelTransactionOut;
import com.taxamo.client.model.CalculateTaxLocationOut;
import com.taxamo.client.model.LocateGivenIPOut;
import com.taxamo.client.model.GetSettlementStatsByTaxationTypeOut;
import com.taxamo.client.model.CreatePaymentOut;
import com.taxamo.client.model.UpdateTransactionIn;
import com.taxamo.client.model.CreateRefundIn;
import com.taxamo.client.model.GetTransactionOut;
import com.taxamo.client.model.CreateSMSTokenOut;
import com.taxamo.client.model.GetSettlementOut;
import com.taxamo.client.model.ListTransactionsOut;
import com.taxamo.client.model.ListPaymentsOut;
import com.taxamo.client.model.GetTransactionsStatsOut;
import com.taxamo.client.model.CapturePaymentOut;
import com.taxamo.client.model.ConfirmTransactionIn;
import com.taxamo.client.model.ValidateTaxNumberOut;
import com.taxamo.client.model.CreateRefundOut;
import com.taxamo.client.model.GetProductTypesDictOut;
import com.taxamo.client.model.GetSettlementSummaryOut;
import com.taxamo.client.model.ConfirmTransactionOut;
import com.taxamo.client.model.GetSettlementStatsByCountryOut;
import com.taxamo.client.model.GetCountriesDictOut;
import com.taxamo.client.model.CalculateSimpleTaxOut;
import com.taxamo.client.model.CreateTransactionOut;
import com.taxamo.client.model.GetCurrenciesDictOut;
import com.taxamo.client.model.VerifySMSTokenOut;
import com.taxamo.client.model.GetRefundsOut;
import com.taxamo.client.model.CreateTransactionIn;
import java.math.BigDecimal;
import java.io.File;
import java.util.*;

public class TaxamoApi {
  String basePath = "https://api.taxamo.com";
  ApiInvoker apiInvoker = new ApiInvoker();

  public TaxamoApi(String apiToken) {
    apiInvoker.addDefaultHeader("Token", apiToken);
  }
  public ApiInvoker getInvoker() {
    return apiInvoker;
  }
  
  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }
  
  public String getBasePath() {
    return basePath;
  }

  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CreateRefundOut createRefund (String key, CreateRefundIn body) throws ApiException {
    // verify required params are set
    if(key == null || body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}/refunds".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (CreateRefundOut) ApiInvoker.deserialize(response, "", CreateRefundOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CreatePaymentOut createPayment (String key, CreatePaymentIn body) throws ApiException {
    // verify required params are set
    if(key == null || body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}/payments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (CreatePaymentOut) ApiInvoker.deserialize(response, "", CreatePaymentOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public ListPaymentsOut listPayments (String limit, String offset, String key) throws ApiException {
    // verify required params are set
    if(key == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}/payments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(limit)))
      queryParams.put("limit", String.valueOf(limit));
    if(!"null".equals(String.valueOf(offset)))
      queryParams.put("offset", String.valueOf(offset));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (ListPaymentsOut) ApiInvoker.deserialize(response, "", ListPaymentsOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CapturePaymentOut capturePayment (String key) throws ApiException {
    // verify required params are set
    if(key == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}/payments/capture".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (CapturePaymentOut) ApiInvoker.deserialize(response, "", CapturePaymentOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CreateTransactionOut createTransaction (CreateTransactionIn body) throws ApiException {
    // verify required params are set
    if(body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (CreateTransactionOut) ApiInvoker.deserialize(response, "", CreateTransactionOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetTransactionOut getTransaction (String key) throws ApiException {
    // verify required params are set
    if(key == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetTransactionOut) ApiInvoker.deserialize(response, "", GetTransactionOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public UpdateTransactionOut updateTransaction (String key, UpdateTransactionIn body) throws ApiException {
    // verify required params are set
    if(key == null || body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (UpdateTransactionOut) ApiInvoker.deserialize(response, "", UpdateTransactionOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public ConfirmTransactionOut confirmTransaction (String key, ConfirmTransactionIn body) throws ApiException {
    // verify required params are set
    if(key == null || body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}/confirm".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (ConfirmTransactionOut) ApiInvoker.deserialize(response, "", ConfirmTransactionOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CancelTransactionOut cancelTransaction (String key) throws ApiException {
    // verify required params are set
    if(key == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/transactions/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (CancelTransactionOut) ApiInvoker.deserialize(response, "", CancelTransactionOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public ListTransactionsOut listTransactions (String statuses, Boolean sortReverse, String taxCountryCode, String orderDateFrom, String keyOrCustomId, Integer offset, String filterText, String format, String orderDateTo, String currencyCode, Integer limit) throws ApiException {
    // create path and map variables
    String path = "/api/v1/transactions".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(statuses)))
      queryParams.put("statuses", String.valueOf(statuses));
    if(!"null".equals(String.valueOf(sortReverse)))
      queryParams.put("sort_reverse", String.valueOf(sortReverse));
    if(!"null".equals(String.valueOf(taxCountryCode)))
      queryParams.put("tax_country_code", String.valueOf(taxCountryCode));
    if(!"null".equals(String.valueOf(orderDateFrom)))
      queryParams.put("order_date_from", String.valueOf(orderDateFrom));
    if(!"null".equals(String.valueOf(keyOrCustomId)))
      queryParams.put("key_or_custom_id", String.valueOf(keyOrCustomId));
    if(!"null".equals(String.valueOf(offset)))
      queryParams.put("offset", String.valueOf(offset));
    if(!"null".equals(String.valueOf(filterText)))
      queryParams.put("filter_text", String.valueOf(filterText));
    if(!"null".equals(String.valueOf(format)))
      queryParams.put("format", String.valueOf(format));
    if(!"null".equals(String.valueOf(orderDateTo)))
      queryParams.put("order_date_to", String.valueOf(orderDateTo));
    if(!"null".equals(String.valueOf(currencyCode)))
      queryParams.put("currency_code", String.valueOf(currencyCode));
    if(!"null".equals(String.valueOf(limit)))
      queryParams.put("limit", String.valueOf(limit));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (ListTransactionsOut) ApiInvoker.deserialize(response, "", ListTransactionsOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CalculateTaxOut calculateTax (CalculateTaxIn body) throws ApiException {
    // verify required params are set
    if(body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/tax/calculate".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (CalculateTaxOut) ApiInvoker.deserialize(response, "", CalculateTaxOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CalculateSimpleTaxOut calculateSimpleTax (String buyerCreditCardPrefix, String buyerTaxNumber, String productType, String forceCountryCode, BigDecimal quantity, BigDecimal unitPrice, BigDecimal totalAmount, Boolean taxDeducted, BigDecimal amount, String billingCountryCode, String currencyCode, String orderDate) throws ApiException {
    // verify required params are set
    if(currencyCode == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/tax/calculate".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(buyerCreditCardPrefix)))
      queryParams.put("buyer_credit_card_prefix", String.valueOf(buyerCreditCardPrefix));
    if(!"null".equals(String.valueOf(buyerTaxNumber)))
      queryParams.put("buyer_tax_number", String.valueOf(buyerTaxNumber));
    if(!"null".equals(String.valueOf(productType)))
      queryParams.put("product_type", String.valueOf(productType));
    if(!"null".equals(String.valueOf(forceCountryCode)))
      queryParams.put("force_country_code", String.valueOf(forceCountryCode));
    if(!"null".equals(String.valueOf(quantity)))
      queryParams.put("quantity", String.valueOf(quantity));
    if(!"null".equals(String.valueOf(unitPrice)))
      queryParams.put("unit_price", String.valueOf(unitPrice));
    if(!"null".equals(String.valueOf(totalAmount)))
      queryParams.put("total_amount", String.valueOf(totalAmount));
    if(!"null".equals(String.valueOf(taxDeducted)))
      queryParams.put("tax_deducted", String.valueOf(taxDeducted));
    if(!"null".equals(String.valueOf(amount)))
      queryParams.put("amount", String.valueOf(amount));
    if(!"null".equals(String.valueOf(billingCountryCode)))
      queryParams.put("billing_country_code", String.valueOf(billingCountryCode));
    if(!"null".equals(String.valueOf(currencyCode)))
      queryParams.put("currency_code", String.valueOf(currencyCode));
    if(!"null".equals(String.valueOf(orderDate)))
      queryParams.put("order_date", String.valueOf(orderDate));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (CalculateSimpleTaxOut) ApiInvoker.deserialize(response, "", CalculateSimpleTaxOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public ValidateTaxNumberOut validateTaxNumber (String countryCode, String taxNumber) throws ApiException {
    // verify required params are set
    if(taxNumber == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/tax/vat_numbers/{tax_number}/validate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "taxNumber" + "\\}", apiInvoker.escapeString(taxNumber.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(countryCode)))
      queryParams.put("country_code", String.valueOf(countryCode));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (ValidateTaxNumberOut) ApiInvoker.deserialize(response, "", ValidateTaxNumberOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CalculateTaxLocationOut calculateTaxLocation (String billingCountryCode, String buyerCreditCardPrefix) throws ApiException {
    // create path and map variables
    String path = "/api/v1/tax/location/calculate".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(billingCountryCode)))
      queryParams.put("billing_country_code", String.valueOf(billingCountryCode));
    if(!"null".equals(String.valueOf(buyerCreditCardPrefix)))
      queryParams.put("buyer_credit_card_prefix", String.valueOf(buyerCreditCardPrefix));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (CalculateTaxLocationOut) ApiInvoker.deserialize(response, "", CalculateTaxLocationOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public LocateMyIPOut locateMyIP () throws ApiException {
    // create path and map variables
    String path = "/api/v1/geoip".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (LocateMyIPOut) ApiInvoker.deserialize(response, "", LocateMyIPOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public LocateGivenIPOut locateGivenIP (String ip) throws ApiException {
    // verify required params are set
    if(ip == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/geoip/{ip}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ip" + "\\}", apiInvoker.escapeString(ip.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (LocateGivenIPOut) ApiInvoker.deserialize(response, "", LocateGivenIPOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetTransactionsStatsOut getTransactionsStats (String dateFrom, String dateTo, String interval) throws ApiException {
    // verify required params are set
    if(dateFrom == null || dateTo == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/stats/transactions".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(dateFrom)))
      queryParams.put("date_from", String.valueOf(dateFrom));
    if(!"null".equals(String.valueOf(dateTo)))
      queryParams.put("date_to", String.valueOf(dateTo));
    if(!"null".equals(String.valueOf(interval)))
      queryParams.put("interval", String.valueOf(interval));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetTransactionsStatsOut) ApiInvoker.deserialize(response, "", GetTransactionsStatsOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetSettlementStatsByCountryOut getSettlementStatsByCountry (String dateFrom, String dateTo) throws ApiException {
    // verify required params are set
    if(dateFrom == null || dateTo == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/stats/settlement/by_country".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(dateFrom)))
      queryParams.put("date_from", String.valueOf(dateFrom));
    if(!"null".equals(String.valueOf(dateTo)))
      queryParams.put("date_to", String.valueOf(dateTo));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetSettlementStatsByCountryOut) ApiInvoker.deserialize(response, "", GetSettlementStatsByCountryOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetSettlementStatsByTaxationTypeOut getSettlementStatsByTaxationType (String dateFrom, String dateTo) throws ApiException {
    // verify required params are set
    if(dateFrom == null || dateTo == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/stats/settlement/by_taxation_type".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(dateFrom)))
      queryParams.put("date_from", String.valueOf(dateFrom));
    if(!"null".equals(String.valueOf(dateTo)))
      queryParams.put("date_to", String.valueOf(dateTo));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetSettlementStatsByTaxationTypeOut) ApiInvoker.deserialize(response, "", GetSettlementStatsByTaxationTypeOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetRefundsOut getRefunds (String format, String mossCountryCode, String dateFrom) throws ApiException {
    // verify required params are set
    if(dateFrom == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/settlement/refunds".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(format)))
      queryParams.put("format", String.valueOf(format));
    if(!"null".equals(String.valueOf(mossCountryCode)))
      queryParams.put("moss_country_code", String.valueOf(mossCountryCode));
    if(!"null".equals(String.valueOf(dateFrom)))
      queryParams.put("date_from", String.valueOf(dateFrom));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetRefundsOut) ApiInvoker.deserialize(response, "", GetRefundsOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetSettlementOut getSettlement (String format, String mossCountryCode, String quarter) throws ApiException {
    // verify required params are set
    if(quarter == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/settlement/{quarter}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "quarter" + "\\}", apiInvoker.escapeString(quarter.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(format)))
      queryParams.put("format", String.valueOf(format));
    if(!"null".equals(String.valueOf(mossCountryCode)))
      queryParams.put("moss_country_code", String.valueOf(mossCountryCode));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetSettlementOut) ApiInvoker.deserialize(response, "", GetSettlementOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetSettlementSummaryOut getSettlementSummary (String mossCountryCode, String quarter) throws ApiException {
    // verify required params are set
    if(quarter == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/settlement/summary/{quarter}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "quarter" + "\\}", apiInvoker.escapeString(quarter.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(mossCountryCode)))
      queryParams.put("moss_country_code", String.valueOf(mossCountryCode));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetSettlementSummaryOut) ApiInvoker.deserialize(response, "", GetSettlementSummaryOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public CreateSMSTokenOut createSMSToken (CreateSMSTokenIn body) throws ApiException {
    // verify required params are set
    if(body == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/verification/sms".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, formParams, contentType);
      if(response != null){
        return (CreateSMSTokenOut) ApiInvoker.deserialize(response, "", CreateSMSTokenOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public VerifySMSTokenOut verifySMSToken (String token) throws ApiException {
    // verify required params are set
    if(token == null ) {
       throw new ApiException(400, "missing required params");
    }
    // create path and map variables
    String path = "/api/v1/verification/sms/{token}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "token" + "\\}", apiInvoker.escapeString(token.toString()));

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (VerifySMSTokenOut) ApiInvoker.deserialize(response, "", VerifySMSTokenOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetCurrenciesDictOut getCurrenciesDict () throws ApiException {
    // create path and map variables
    String path = "/api/v1/dictionaries/currencies".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetCurrenciesDictOut) ApiInvoker.deserialize(response, "", GetCurrenciesDictOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetProductTypesDictOut getProductTypesDict () throws ApiException {
    // create path and map variables
    String path = "/api/v1/dictionaries/product_types".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetProductTypesDictOut) ApiInvoker.deserialize(response, "", GetProductTypesDictOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  //error info- code: 200 reason: "OK" model: <none>
  //error info- code: 401 reason: "Incorrect token" model: <none>
  //error info- code: 400 reason: "Validation failed, see JSON body response for details." model: <none>
  public GetCountriesDictOut getCountriesDict (Boolean taxSupported) throws ApiException {
    // create path and map variables
    String path = "/api/v1/dictionaries/countries".replaceAll("\\{format\\}","json");

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, String> formParams = new HashMap<String, String>();

    if(!"null".equals(String.valueOf(taxSupported)))
      queryParams.put("tax_supported", String.valueOf(taxSupported));
    String[] contentTypes = {
      "application/json"};

    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, null, headerParams, formParams, contentType);
      if(response != null){
        return (GetCountriesDictOut) ApiInvoker.deserialize(response, "", GetCountriesDictOut.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return null;
      }
      else {
        throw ex;
      }
    }
  }
  }

